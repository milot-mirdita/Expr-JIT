#include "dynasm/dasm_arm64.h"

|.arch arm64
|.actionlist ej_compile_actionlist
|.section code
|.globals GLOB_

static void emit(Dst_DECL, uint64_t* op) {
  | .macro movq, Xn, imm
  |   movz    Xn, #(imm)&0xffff
  |   movk    Xn, #(imm>>16)&0xffff, lsl #16
  |   movk    Xn, #(imm>>32)&0xffff, lsl #32
  |   movk    Xn, #(imm>>48)&0xffff, lsl #48
  | .endmacro
  | .macro logic, op
  |   ldr     d0, [sp, #16]
  |   add     sp, sp, #16
  |   ldr     d1, [sp, #16]
  |   fcmpe   d1, d0
  |   cset    w0, op
  |   ucvtf   d0, w0
  |   str     d0, [sp, #16]
  | .endmacro
  int arg = 1;
  while (1) {
    switch (*op) {
      case OP_pos:
        | .nop
        break;
      case OP_neg:
        | ldr     d0, [sp, #16]
        | fneg    d0, d0
        | str     d0, [sp, #16]
        break;
      case OP_add:
        | ldr     d0, [sp, #16]
        | add     sp, sp, #16
        | ldr     d1, [sp, #16]
        | fadd    d0, d1, d0
        | str     d0, [sp, #16]
        break;
      case OP_sub:
        | ldr     d0, [sp, #16]
        | add     sp, sp, #16
        | ldr     d1, [sp, #16]
        | fsub    d0, d1, d0
        | str     d0, [sp, #16]
        break;
      case OP_mul:
        | ldr     d0, [sp, #16]
        | add     sp, sp, #16
        | ldr     d1, [sp, #16]
        | fmul    d0, d1, d0
        | str     d0, [sp, #16]
        break;
      case OP_div:
        | ldr     d0, [sp, #16]
        | add     sp, sp, #16
        | ldr     d1, [sp, #16]
        | fdiv    d0, d1, d0
        | str     d0, [sp, #16]
        break;
      case OP_var:
        op++;
        | sub     sp, sp, #16
        | movq    x1, *op
        | ldr     x0, [x1]
        | fmov    d0, x0
        | str     d0, [sp, #16]
        break;
      case OP_con:
        op++;
        | sub     sp, sp, #16
        | movq    x0, *op
        | fmov    d0, x0
        | str     d0, [sp, #16]
        break;
      case OP_ret:
        | ldr     d0, [sp, #16]
        | add     sp, sp, #16
        | ret
        return;
      case OP_clo0:
        op++;
        | movq    x0, *op
      case OP_fun0:
        op++;
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        | sub     sp, sp, #16
        | str     d0, [sp, #16]
        break;
      case OP_clo1:
        op++;
        | movq    x0, *op
      case OP_fun1:
        op++;
        | ldr     d0, [sp, #(16 * 1)]
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        //| add      sp, sp, #(16 * 0)
        | str     d0, [sp, #16]
        break;
      case OP_clo2:
        op++;
        | movq    x0, *op
      case OP_fun2:
        op++;
        | ldr     d0, [sp, #(16 * 2)]
        | ldr     d1, [sp, #(16 * 1)]
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        | add     sp, sp, #(16 * 1)
        | str     d0, [sp, #16]
        break;
      case OP_clo3:
        op++;
        | movq    x0, *op
      case OP_fun3:
        op++;
        | ldr     d0, [sp, #(16 * 3)]
        | ldr     d1, [sp, #(16 * 2)]
        | ldr     d2, [sp, #(16 * 1)]
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        | add     sp, sp, #(16 * 2)
        | str     d0, [sp, #16]
        break;
      case OP_clo4:
        op++;
        | movq    x0, *op
      case OP_fun4:
        op++;
        | ldr     d0, [sp, #(16 * 4)]
        | ldr     d1, [sp, #(16 * 3)]
        | ldr     d2, [sp, #(16 * 2)]
        | ldr     d3, [sp, #(16 * 1)]
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        | add     sp, sp, #(16 * 3)
        | str     d0, [sp, #16]
        break;
      case OP_clo5:
        op++;
        | movq    x0, *op
      case OP_fun5:
        op++;
        | ldr     d0, [sp, #(16 * 5)]
        | ldr     d1, [sp, #(16 * 4)]
        | ldr     d2, [sp, #(16 * 3)]
        | ldr     d3, [sp, #(16 * 2)]
        | ldr     d4, [sp, #(16 * 1)]
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        | add     sp, sp, #(16 * 4)
        | str     d0, [sp, #16]
        break;
      case OP_clo6:
        op++;
        | movq    x0, *op
      case OP_fun6:
        op++;
        | ldr     d0, [sp, #(16 * 6)]
        | ldr     d1, [sp, #(16 * 5)]
        | ldr     d2, [sp, #(16 * 4)]
        | ldr     d3, [sp, #(16 * 3)]
        | ldr     d4, [sp, #(16 * 2)]
        | ldr     d5, [sp, #(16 * 1)]
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        | add     sp, sp, #(16 * 5)
        | str     d0, [sp, #16]
        break;
      case OP_clo7:
        op++;
        | movq    x0, *op
      case OP_fun7:
        op++;
        | ldr     d0, [sp, #(16 * 7)]
        | ldr     d1, [sp, #(16 * 6)]
        | ldr     d2, [sp, #(16 * 5)]
        | ldr     d3, [sp, #(16 * 4)]
        | ldr     d4, [sp, #(16 * 3)]
        | ldr     d5, [sp, #(16 * 2)]
        | ldr     d6, [sp, #(16 * 1)]
        | stp     x29, x30, [sp, #-32]!
        | mov     x29, sp
        | movq    x1, *op
        | blr     x1
        | ldp     x29, x30, [sp], #32
        | add     sp, sp, #(16 * 6)
        | str     d0, [sp, #16]
        break;

      case OP_lt:
        | logic   mi
        break;
      case OP_le:
        | logic   ls
        break;
      case OP_gt:
        | logic   gt
        break;
      case OP_ge:
        | logic   ge
        break;
      case OP_eq:
        | logic   eq
        break;
      case OP_neq:
        | logic   ne
        break;
      case OP_and:
        | ldr     d0, [sp, #16]
        | add     sp, sp, #16
        | mov     w0, #0
        | fcmp    d0, #0.0
        | beq     ->endand
        | ldr     d0, [sp, #16]
        | fcmp    d0, #0.0
        | cset    w0, ne
        |->endand:
        | ucvtf   d0, w0
        | str     d0, [sp, #16]
        break;
      case OP_or:
        | ldr     d0, [sp, #16]
        | add     sp, sp, #16
        | mov     w0, #1
        | fcmp    d0, #0.0
        | bne     ->endor
        | ldr     d0, [sp, #16]
        | fcmp    d0, #0.0
        | cset    w0, ne
        |->endor:
        | ucvtf   d0, w0
        | str     d0, [sp, #16]
        break;
      case OP_not:
        | ldr     d0, [sp, #16]
        | fcmpe   d0, #0.0
        | cset    w0, eq
        | ucvtf   d0, w0
        | str     d0, [sp, #16]
        break;

      default:
        assert(0);
        __builtin_unreachable();
    }
    
    ++op;
  }
}